{"componentChunkName":"component---src-pages-enable-wo-classification-mdx","path":"/enable-wo-classification/","result":{"pageContext":{"frontmatter":{"title":"Enable the use of work order classifications in Technician app"},"relativePagePath":"/enable-wo-classification.mdx","titleType":"append","MdxNode":{"id":"afa0123f-979c-590d-a712-76583a44a2e3","children":[],"parent":"78a353bf-6dc7-5d3e-aba3-a91c47d7f540","internal":{"content":"---\ntitle: Enable the use of work order classifications in Technician app\n---\n\n## About this task\n\nThis guide walks through how to include the use of Classifications when creating a new work order record in Technician application.\n\n## Procedure\n\n### Step 1: Add a new datasource referencing the mxapiclassstructure object structure. This should be defined along with the other search datasources at the top level of the application (pages). This ensures that this datasource can be used on other pages, such as the edit page. Below is a saved query called “emxwoclass” but this can be changed to anything you add to the object structure to show the appropriate classifications.\n\n```xml\n  <maximo-datasource id=\"classificationLookupDS\" lookup-data=\"true\" object-structure=\"mxapiclassstructure\" offline-immediate-download=\"true\" saved-query=\"emxwoclass\" selection-mode=\"single\" order-by=\"classificationid\">\n    <schema>\n      <attribute name=\"classstructureid\"/>\n      <attribute name=\"classificationid\" searchable=\"true\"/>\n      <attribute name=\"classificationdesc\"/>\n      <attribute name=\"hierarchypath\"/>\n      <attribute name=\"description\" searchable=\"true\"/>\n    </schema>\n  </maximo-datasource>\n```\n\n### Step 2: Add a new lookup. All lookups are defined at the page level, but this is not mandatory and would not be recommended for lookups like this. We recommend adding above /<pages id=\"pages\"/> the block.\n\n```xml\n  <dialogs id=\"demolookups\">\n    <lookup-with-filter lookup-heading=\"Classification\" datasource=\"classificationLookupDS\" id=\"classificationLookup\" lookup-attributes=\"{['hierarchypath','classificationid','description']}\"/>\n  </dialogs>\n```\n\n### Step 3: In the \"datasource\" dsCreateWo, search for id=\"dsCreateWo\" and add the following attributes.\n\n```xml\n  <attribute name=\"classstructureid\" />\n  <attribute name=\"hierarchypath\" local=\"true\"/>\n```\n\n### Step 4: Add UI elements to display the hierarchy path and open the search page, locate the id “q55zy” and add the code below.\n\n```xml\n  <box children-sizes=\"100\" background-color=\"field-01\" direction=\"row\" fill-child=\"true\" fill-parent=\"true\" padding-bottom=\".5\" padding-top=\".5\" id=\"a1_z2883\">\n    <border-layout fill-parent=\"true\" width=\"100%\" padding=\"true\" id=\"a1_b4_p6\">\n      <start direction=\"row\" horizontal-overflow=\"hidden\" vertical-align=\"center\" width=\"60\" shrink=\"0\" id=\"a1_qx8e2\">\n        <field empty-field-placeholder=\"Select a classification\" label=\"Hierarchy\" value=\"{dsCreateWo.item.hierarchypath}\" id=\"a1_r_xgy\"/>\n      </start>\n      <end horizontal-align=\"end\" vertical-align=\"center\" direction=\"column\" id=\"a1_wpewd\">\n        <button icon=\"Carbon:chevron--right\" kind=\"ghost\" on-click=\"openClassificationLookup\" on-click-arg=\"{{'page':page,'app':app, 'item':dsCreateWo.item}}\" padding=\"false\" id=\"a1_w6n9m\"/>\n      </end>\n    </border-layout>\n  </box>\n```\n\n### Step 5: In AppCustomizations.js, we need to add an openClassificationLookup event to handle the chevron (arrow). Note that in the previous statement, in step 4, we provided the current page and the current record. This is important so that our openClassificationLookup event has the necessary arguments.\n\n```js\n  openClassificationLookup(event) {\n    event.page.showLookup(\"classificationLookup\", { targetItem: event.item, targetField: 'classstructureid', selectLookupAttribute: 'classstructureid' });\n  } \n```\n\n### Step 6: Since the framework currently only allows us to set 1 attribute of a lookup, we need to use the onValueChanged event to set the hierarchy path when classstructureid is set.\n\n```js\n  async onValueChanged(event) {\n    let dataSource=event.datasource;\n    if(event.field==\"classstructureid\") {\n      let lookupDs=this.app.findDatasource(\"classificationLookupDS\");\n      await lookupDs.initializeQbe();\n      lookupDs.setQBE(\"classstructureid\",\"=\",event.newValue);\n      let records=await lookupDs.searchQBE();\n      if(records.length==1) {\n        event.item[\"hierarchypath\"]=records[0].hierarchypath;\n      }\n      lookupDs.clearQBE();\n      await lookupDs.searchQBE(undefined,true);\n    }\n  }\n```\n\n### Step 7: Go to the application object structure in Maximo and locate the “mxapiclassstructure” object, create a new query using the name defined in step 1 “emxwoclass”, with “Query Type” = “osclause” and enable the Public flag. Classifications can be defined at the site level and not all classifications are valid for WORKORDER, so I used the following query clause as a starting point.\n\n```\n(siteid is null or siteid=(select defsite from maxuser where userid=:user)) and exists(select 1 from classusewith where classstructureid=classstructure.classstructureid and objectname='WORKORDER')\n```\n![emxwoclass query definition](assets/emxwoclass-query-definition.png)\n\n### Step 8: In the Security application, confirm that your group has read access to the \"MXAPICLASSSTRUCTURE\" object.\n\n![object structure security](assets/object-structure-security.png)","type":"Mdx","contentDigest":"24d61add1a8dbe6384b5fab0549a4cbf","owner":"gatsby-plugin-mdx","counter":73},"frontmatter":{"title":"Enable the use of work order classifications in Technician app"},"exports":{},"rawBody":"---\ntitle: Enable the use of work order classifications in Technician app\n---\n\n## About this task\n\nThis guide walks through how to include the use of Classifications when creating a new work order record in Technician application.\n\n## Procedure\n\n### Step 1: Add a new datasource referencing the mxapiclassstructure object structure. This should be defined along with the other search datasources at the top level of the application (pages). This ensures that this datasource can be used on other pages, such as the edit page. Below is a saved query called “emxwoclass” but this can be changed to anything you add to the object structure to show the appropriate classifications.\n\n```xml\n  <maximo-datasource id=\"classificationLookupDS\" lookup-data=\"true\" object-structure=\"mxapiclassstructure\" offline-immediate-download=\"true\" saved-query=\"emxwoclass\" selection-mode=\"single\" order-by=\"classificationid\">\n    <schema>\n      <attribute name=\"classstructureid\"/>\n      <attribute name=\"classificationid\" searchable=\"true\"/>\n      <attribute name=\"classificationdesc\"/>\n      <attribute name=\"hierarchypath\"/>\n      <attribute name=\"description\" searchable=\"true\"/>\n    </schema>\n  </maximo-datasource>\n```\n\n### Step 2: Add a new lookup. All lookups are defined at the page level, but this is not mandatory and would not be recommended for lookups like this. We recommend adding above /<pages id=\"pages\"/> the block.\n\n```xml\n  <dialogs id=\"demolookups\">\n    <lookup-with-filter lookup-heading=\"Classification\" datasource=\"classificationLookupDS\" id=\"classificationLookup\" lookup-attributes=\"{['hierarchypath','classificationid','description']}\"/>\n  </dialogs>\n```\n\n### Step 3: In the \"datasource\" dsCreateWo, search for id=\"dsCreateWo\" and add the following attributes.\n\n```xml\n  <attribute name=\"classstructureid\" />\n  <attribute name=\"hierarchypath\" local=\"true\"/>\n```\n\n### Step 4: Add UI elements to display the hierarchy path and open the search page, locate the id “q55zy” and add the code below.\n\n```xml\n  <box children-sizes=\"100\" background-color=\"field-01\" direction=\"row\" fill-child=\"true\" fill-parent=\"true\" padding-bottom=\".5\" padding-top=\".5\" id=\"a1_z2883\">\n    <border-layout fill-parent=\"true\" width=\"100%\" padding=\"true\" id=\"a1_b4_p6\">\n      <start direction=\"row\" horizontal-overflow=\"hidden\" vertical-align=\"center\" width=\"60\" shrink=\"0\" id=\"a1_qx8e2\">\n        <field empty-field-placeholder=\"Select a classification\" label=\"Hierarchy\" value=\"{dsCreateWo.item.hierarchypath}\" id=\"a1_r_xgy\"/>\n      </start>\n      <end horizontal-align=\"end\" vertical-align=\"center\" direction=\"column\" id=\"a1_wpewd\">\n        <button icon=\"Carbon:chevron--right\" kind=\"ghost\" on-click=\"openClassificationLookup\" on-click-arg=\"{{'page':page,'app':app, 'item':dsCreateWo.item}}\" padding=\"false\" id=\"a1_w6n9m\"/>\n      </end>\n    </border-layout>\n  </box>\n```\n\n### Step 5: In AppCustomizations.js, we need to add an openClassificationLookup event to handle the chevron (arrow). Note that in the previous statement, in step 4, we provided the current page and the current record. This is important so that our openClassificationLookup event has the necessary arguments.\n\n```js\n  openClassificationLookup(event) {\n    event.page.showLookup(\"classificationLookup\", { targetItem: event.item, targetField: 'classstructureid', selectLookupAttribute: 'classstructureid' });\n  } \n```\n\n### Step 6: Since the framework currently only allows us to set 1 attribute of a lookup, we need to use the onValueChanged event to set the hierarchy path when classstructureid is set.\n\n```js\n  async onValueChanged(event) {\n    let dataSource=event.datasource;\n    if(event.field==\"classstructureid\") {\n      let lookupDs=this.app.findDatasource(\"classificationLookupDS\");\n      await lookupDs.initializeQbe();\n      lookupDs.setQBE(\"classstructureid\",\"=\",event.newValue);\n      let records=await lookupDs.searchQBE();\n      if(records.length==1) {\n        event.item[\"hierarchypath\"]=records[0].hierarchypath;\n      }\n      lookupDs.clearQBE();\n      await lookupDs.searchQBE(undefined,true);\n    }\n  }\n```\n\n### Step 7: Go to the application object structure in Maximo and locate the “mxapiclassstructure” object, create a new query using the name defined in step 1 “emxwoclass”, with “Query Type” = “osclause” and enable the Public flag. Classifications can be defined at the site level and not all classifications are valid for WORKORDER, so I used the following query clause as a starting point.\n\n```\n(siteid is null or siteid=(select defsite from maxuser where userid=:user)) and exists(select 1 from classusewith where classstructureid=classstructure.classstructureid and objectname='WORKORDER')\n```\n![emxwoclass query definition](assets/emxwoclass-query-definition.png)\n\n### Step 8: In the Security application, confirm that your group has read access to the \"MXAPICLASSSTRUCTURE\" object.\n\n![object structure security](assets/object-structure-security.png)","fileAbsolutePath":"/home/travis/build/maximo-app-framework/configuration-practices-documentation/src/pages/enable-wo-classification.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}